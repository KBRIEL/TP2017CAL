import TP1CAL.*

describe "tests TP1CAL"{
	var lata205 = new Lata(205)
	var cable1010 = new Cable(10, 10)
	var matOscCable = new MateriaOscura(cable1010)
	var fleebRadioact = new Fleeb([matOscCable, new Lata(2)], 16)
	var fleebRadioact2 = new Fleeb([matOscCable, lata205], 16)
	var lata50 = new Lata(50)
	var lata5 = new Lata(5)
	var parasito1 = new ParasitoAlienigena(entregarTodo)
	var parasito12 = new ParasitoAlienigena(entregarTodo2)
	var parasito2 = new ParasitoAlienigena(descartarUnElemento)
	var parasito3 = new ParasitoAlienigena(incrementaODecrementaEnergia)
	var parasito4 = new ParasitoAlienigena(elementoOculto)

	
	fixture {
		rick.getCompaniero().cambioEnergia(1000) // energia inicial
		
		morty.recolectar(lata205) // -205 energia
		morty.recolectar(fleebRadioact) // -4.2 energía
		morty.recolectar(lata5) // - 5 energia
		morty.darObjetosA(rick)
		rick.getCompaniero().recolectar(lata50) // -50 energia
		rick.getCompaniero().darObjetosA(rick)				
												// energía recolecciones = -264.2
											
		
	}
	
	test "remover"{
		var componente =#{lata205,fleebRadioact}
		rick.removerMateriales(componente)
		assert.equals([lata5,lata50], rick.verMochila())
	}
	
	
	test "recolección fallida por energía"{
		rick.getCompaniero().recolectar(lata205) // -205 energia
		rick.getCompaniero().recolectar(fleebRadioact) // -4.2 energía
		rick.getCompaniero().recolectar(lata5) // - 5 energia
		
		assert.throwsExceptionWithMessage("No puede recolectar: " + lata50 , {morty.recolectar(lata50)})
		}
	
	test "recolección fallida por cantidad de objetos en la mochila"{
		morty.cambioEnergia(5000)
		morty.recolectar(lata50)
		morty.recolectar(lata50)
		morty.recolectar(lata50)
		assert.equals(false, morty.puedeRecolectar(lata50))
		assert.throwsExceptionWithMessage("No puede recolectar: " + lata50 , {morty.recolectar(lata50)})
	}
	test "cambio  energia"{
		morty.sinEnergia()
		assert.equals(0, morty.energia())
		morty.cambioEnergia(150)
		assert.equals(150, morty.energia())
		morty.cambioEnergia(-50)
		assert.equals(100, morty.energia())
		morty.recolectar(lata50)
		assert.equals(50, morty.energia())
	}	

	test "rick crea experimentos"{
						
												
												
		assert.equals(4,rick.getMochila().size()) //En este momento la mochila de rick debe tener 4 objetos
		assert.equals(735.8, rick.getCompaniero().energia()) //energía inicial + recolecciones
		rick.realizar(new ExperimentoBateria())
		assert.equals(3, rick.getMochila().size()) //debe quedar con sólo 3 materiales, ya que 2 fueron utilizado para crear la batería, y esta
																				
		assert.equals(730.8, rick.getCompaniero().energia()) // la batería le resta 5 puntos de energía al compañero!
		
		}
		
		
	
	test " lata"{
		assert.equals(205, lata205.gramosDeMetal())
		assert.equals(20.5, lata205.electricidadQueConduce())
		assert.equals(false, lata205.esRadioactivo())
		assert.equals(0,lata205.energiaProducida())
	}
	
	test " cable1010"{
		assert.equals(0.1, cable1010.gramosDeMetal())
		assert.equals(30, cable1010.electricidadQueConduce())
		assert.equals(false, cable1010.esRadioactivo())
		assert.equals(0,cable1010.energiaProducida())
	}
	
	test " materia oscura"{
		assert.equals(0.1, matOscCable.gramosDeMetal())
		assert.equals(15, matOscCable.electricidadQueConduce())
		assert.equals(false, matOscCable.esRadioactivo())
		assert.equals(0,matOscCable.energiaProducida())
	}
	
	test "fleeb"{
		assert.equals(205.1, fleebRadioact2.gramosDeMetal())
		assert.equals( 15, fleebRadioact2.electricidadQueConduce())
		assert.equals(true, fleebRadioact2.esRadioactivo())
		assert.equals(0,fleebRadioact2.energiaProducida())
	}
	

	test "morty"{
		assert.equals(true, morty.puedeRecolectar(lata5))
	}
	test "summer sin energia"{
		summer.cambioEnergia(9)
		summer.recolectar(lata5)
		assert.equals(true, summer.puedeRecolectar(lata5))
		
	}
	test "summer con energia"{
		summer.cambioEnergia(50)
		assert.equals(true, summer.puedeRecolectar(lata5))
	}
	test "summer dar objetos"{
		rick.vaciarMochila()
		summer.cambioEnergia(50)
		summer.recolectar(lata5)
		summer.darObjetosA(rick)
		assert.equals([lata5], rick.verMochila())
		assert.equals(35, summer.energia())
			
	}
	test "summer sin espacio mochila"{
		summer.cambioEnergia(50)
		summer.recolectar(lata5)
		summer.recolectar(lata5)
		assert.equals(false, summer.puedeRecolectar(lata5))
	}
	test "jerry"{
		assert.equals(false, jerry.puedeRecolectar(lata205))
	}
	test "lata"{
		assert.equals(5,lata5.energiaDeRecoleccion())
	}

	test "parasito alienigena 1 entregar todo"{
		morty.recolectar(lata205)
		morty.recolectar(parasito1)
		assert.equals([],rick.getCompaniero().mochila() )
	}
	test"morty1"{
		morty.recolectar(lata205)
		morty.darObjetosA(rick)
		assert.equals([],rick.getCompaniero().mochila() )
	}
	
	test "parasito alienigena 2 descargar un elemento"{
		morty.recolectar(lata205)
		morty.recolectar(parasito2)
		assert.equals([],rick.getCompaniero().mochila() )
	}
	
	test "parasito alienigena 3 porcentaje "{
		incrementaODecrementaEnergia.energiaParaEfecto(20)
		morty.recolectar(parasito3)
		assert.equals(0,rick.getCompaniero().energia() )
	}
	
	test "parasito alienigena 4 elemento oculto"{
		morty.mochila().clear()
		parasito4.elementoOculto(cable1010)
		morty.recolectar(parasito4)
		assert.equals([parasito4, cable1010],rick.getCompaniero().mochila() )
	}
	
}

